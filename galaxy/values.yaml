# A simple values file for galaxy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: galaxy/galaxy
  tag: 19.05
  pullPolicy: IfNotPresent

nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  port: 8000

webHandlers:
  replicaCount: 1

jobHandlers:
  replicaCount: 1

rbac:
  enabled: true

persistence:
  enabled: true
  name: galaxy-pvc
  # annotations: {}
  # storageClass:
  # existingClaim:
  accessMode: ReadWriteMany
  size: 10Gi
  mountPath: /galaxy/server/database

extraEnv:
# If using an existing secret, the postgresql.extraEnv.GALAXY_DB_USER_PASSWORD's
# secretKeyRef must also be set to match. Leave defaults to create a new secret.
  - name: GALAXY_DB_USER_PASSWORD
    valueFrom:
      secretKeyRef:
        name: "{{ .Release.Name }}-galaxy-db-password"
        key: galaxy-db-password

ingress:
  enabled: true
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - ~
    # - host: ~
    #   paths: ["/"]
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

postgresql:
  enabled: true
  galaxyDatabaseUser: galaxydbuser
  galaxyDatabasePassword: 42
  nameOverride: galaxy-postgres
  initdbScriptsSecret: "{{ .Release.Name }}-galaxy-initdb"
  persistence:
    enabled: true
  extraEnv:
    - name: GALAXY_DB_USER_PASSWORD
      valueFrom:
        secretKeyRef:
          name: "{{ .Release.Name }}-galaxy-db-password"
          key: galaxy-db-password

cvmfs:
  enabled: false

# When this flag is set to true, all configs will be set in secrets,
# when it is set to false, all configs will be set in configmaps
useSecretConfigs: false

# readiness and liveness probe parameters : {{ .Values.probeConfig.* }}
probeConfig:
  probeInterval: 60
  probeLocation: /tmp

# All files will be relative to `/galaxy/server/config/` directory
configs:
  job_conf.xml: |
    <job_conf>
        <plugins>
            <plugin id="local" type="runner" load="galaxy.jobs.runners.local:LocalJobRunner" workers="4" />
            <plugin id="k8s" type="runner" load="galaxy.jobs.runners.kubernetes:KubernetesJobRunner">
              <param id="k8s_use_service_account">true</param>
              <param id="k8s_persistent_volume_claims">{{ template "galaxy.pvcname" . }}:{{.Values.persistence.mountPath}}</param>
              <param id="k8s_namespace">{{ .Release.Namespace }}</param>
              <!-- Must be DNS friendly and less than 20 characters -->
              <param id="k8s_galaxy_instance_id">{{ .Release.Name }}</param>
              <param id="k8s_run_as_user_id">101</param>
              <param id="k8s_run_as_group_id">101</param>
              <param id="k8s_fs_group_id">101</param>
              <param id="k8s_supplemental_group_id">101</param>
              <param id="k8s_pull_policy">IfNotPresent</param>
              <param id="k8s_cleanup_job">always</param>
            </plugin>
        </plugins>
        <destinations default="dynamic-k8s-dispatcher">
            <destination id="local" runner="local"/>
            <destination id="dynamic-k8s-dispatcher" runner="dynamic">
              <param id="type">python</param>
              <param id="function">k8s_container_mapper</param>
              <param id="docker_default_container_id">{{ .Values.image.repository }}:{{ .Values.image.tag }}</param>
              <param id="docker_enabled">true</param>
            </destination>
        </destinations>
    </job_conf>
  galaxy.yml: |
    uwsgi:
      virtualenv: /galaxy/server/.venv
      processes: 1
      http: 0.0.0.0:8080
      static-map: /static/style=/galaxy/server/static/style/blue
      static-map: /static=/galaxy/server/static
      static-map: /favicon.ico=/galaxy/server/static/favicon.ico
      pythonpath: /galaxy/server/lib
      thunder-lock: true
      manage-script-name: true
      mount: {{.Values.ingress.path}}=galaxy.webapps.galaxy.buildapp:uwsgi_app()
      buffer-size: 16384
      offload-threads: 2
      threads: 4
      die-on-term: true
      master: true
      hook-master-start: unix_signal:2 gracefully_kill_them_all
      enable-threads: true
      py-call-osafterfork: true
    galaxy:
      database_connection: 'postgresql://{{.Values.postgresql.galaxyDatabaseUser}}:{{.Values.postgresql.galaxyDatabasePassword}}@{{ template "galaxy-postgresql.fullname" . }}/galaxy'
      integrated_tool_panel_config: "/galaxy/server/config/mutable/integrated_tool_panel.xml"
      containers_resolvers_config_file: "/galaxy/server/config/container_resolvers_conf.xml"
      job_config_file: "/galaxy/server/config/job_conf.xml"
      probe_liveness: true
      liveness_probe_directory: {{ .Values.probeConfig.probeLocation }}
      liveness_probe_interval: {{ .Values.probeConfig.probeInterval }}
  container_resolvers_conf.xml: |
    <containers_resolvers>
      <explicit />
      <mulled />
      <build_mulled />
    </containers_resolvers>
scripts:
  prober.sh: |
    function timediff {
      lastUpdate="$(stat -c %Y $1)"
      now="$(date +%s)"
      let diff="${now}-${lastUpdate}"
      if [ "$diff" -gt "$2" ]; then
        echo "$1 was last modified $diff seconds ago (>$2); liveness failed"
        exit 1
      fi
    }

    array=()
    while IFS=  read -r -d $'\0'; do
        array+=("$REPLY")
    done < <(find {{ .Values.probeConfig.probeLocation }} -name "liveprobe*" -type f -print0)

    for i in "${array[@]}"
    do
            timediff $i $(({{ .Values.probeConfig.probeInterval }} + 10))
    done

# Additional dynamic rules to map into the container.
jobs:
  rules:
    container-mapper-rules.yml: |
      mappings:
        - tool_ids:
            - sort1
          container:
            docker_container_id_override: {{ .Values.image.repository }}:{{ .Values.image.tag }}
    k8s-container-mapper.py: |
      {{- (.Files.Get "files/rules/k8s-container-mapper.py") }}
